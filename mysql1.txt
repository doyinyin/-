一、搭建mysql数据库服务器 192.168.4.50
开源且跨平台
支持主流的编程语言
可移植性
数据库通常和网站服务一起使用
1装包
1.1 删除系统自带mariadb mysql数据库软件
]#rpm   -qa  |  grep   -i  mariadb
]#systemctl  stop  mariadb
]#rpm   -e  --nodeps   mariadb-server   mariadb
]#rpm   -e  --nodeps   mariadb-libs
]#rm  -rf  /etc/my.cnf
]#rm  -rf  /var/lib/mysql
1.2 安装mysql软件
]# tar  -xf  mysql-5.7.17-1.el7.x86_64.rpm-bundle.tar
]#  ls  *.rpm
]#  rm  -rf   mysql-community-server-minimal-5.7.17-1.el7.x86_64.rpm
根据生产环境进行安装依赖包
]#  yum   -y   install    perl-JSON   
]#  rpm  -Uvh    mysql-community-*.rpm
]#  rpm  -qa   | grep  -i   mysql
修改配置文件(不需要修改配置文件 按默认配置运行即可)
ls  /etc/my.cnf
启动服务,数据初始化
systemctl   start  mysqld
systemctl   enable  mysqld
查看服务进程和端口号
ps   -C   mysqld
  PID TTY          TIME CMD
  3252 ?        00:00:00 mysqld
netstat  -utnlp  | grep  mysqld
  tcp6       0      0 :::3306                 :::*                    LISTEN      
3252/mysqld  
用户授权
什么是用户授权： 在数据库服务器上添加连接用户，添加时可以设置用户的访问权限和连接的密
码。默认只允许数据库管理员root用户在本机登录。默认只有数据库管理员root用户在本机登录才有
授权权限。
用户授权命令的语法格式
mysql>  grant   权限  on  数库名   to  用户名@"客户端地址"    
identified   by  "密码"   [with  grant  option];
恢复数据库管理员本机登录密码
mysql库user表   授权库
]#systemctl  stop mysqld
]# vim /etc/my.cnf
[mysqld]
skip-grant-tables
#validate_password_policy=0
#validate_password_length=6
:wq
]# systemctl  start mysqld
]#mysql
mysql> select  host,user,authentication_string  from mysql.user;
mysql> update  mysql.user set  authentication_string=password("abc123") where host="localhost"  and  user="root";
mysql> flush  privileges;
mysql>quit
]# vim /etc/my.cnf
[mysqld]
#skip-grant-tables
validate_password_policy=0
validate_password_length=6
:wq
]# systemctl  restart mysqld
]#  mysql   -uroot  -pabc123
用户授权命令的语法格式
mysql>  grant   权限列表  on  数库名   to  用户名@"客户端地址"    
identified   by  "密码"   [with  grant  option];
授权库mysql 主要的几个表
——user表，储存授权用户的访问权限
——db表，储存授权用户对数据库的访问权限
——tables_priv表，储存授权用户对表的访问权限
——columns_priv表，储存授权用户对字段的访问权限
注意
当库名.表名 为*.*时，匹配所有库所有表
授权设置存放在mysql库的user表
权限列表
——all：匹配所有权限
——SELECT，UPDAT，INSERT
——SELECT，UPDATE(字段1,....,字段n)
客户端地址
——%：匹配所有主机
——192.168.1.%：匹配指定的一个网段
——192.168.1.1：匹配指定ip地址的单个主机
——%.tarena.com：匹配一个dns区域
——svr1.tarena.com：匹配指定域名的单个主机
应用示例
新建用户mydba,对所有库,表有完全权限.允许从任何地址访问,密码设为123456,允许该用户为其他用户授权
grant all on *.* to mydba@'%' identified by '123456' with grant option;
授权sqler01用户,允许从192.168.4.0/24网段访问,对userdb库的user表有查询权限,登陆密码123456
grant select on userdb.user to sqler01@"192.168.4.0/24" identified by "123456";
授权sqler02用户，允许从本地访问，允许对userdb库的任何表有查询/更新/插入/删除权限,密码为123456
grant select,insert,uodate,delete on userdb.* to sqler02@"localhost" identified by "123456"
grant  select,update(name) on studb.t8 to yaya3@"%" identified by "123456";
grant  select,insert,update on  studb.dogperson to  yaya@"localhost"   identified by 
"123456";
查看用户授权
用户查看自己的权限
show grants;
show grants for 用户名@'客户端地址';
select @@hostname; 查看当前用户信息
select user(); 查看当前连接用户的主机
重设用户密码
授权用户连接后修改密码
set password=password("新密码");
管理员重值授权用户连接密码
set password for 用户名@'客户端地址'=password("新密码");
撤销授权
撤销用户权限
revoke  权限列表  on 库名.表名   from   用户名@"客户端地址";     
二、数据库服务的基本使用
2.1 使用初始密码在本机连接数据库服务
初始密码在日志文件
]# grep password /var/log/mysqld.log
]# mysql   -hlocalhost   -uroot   -p'hqToPwaqf5,g!><'
2.2 重置本机连接密码
mysql>set global validate_password_policy=0;  只检查密码的长度
mysql>set global validate_password_length=6; 密码长度不能小于6个字符
mysql>alter  user   root@"localhost"  identified by "123456"；
mysql>quit
]# mysql   -hlocalhost   -uroot   -p123456
mysql>  show   databases;
让密码策略永久生效
]#vim  /etc/my.cnf
[mysqld]
validate_password_policy=0
validate_password_length=6
:wq
]#systemctl   restart  mysqld

2.3 把数据存储在数据库服务器上的过程？
连接数据库服务器（命令行   API    图形工具）
选择库 （存放数据的文件夹）
选择表 （就是文件）
插入记录  （文件中的行）
断开连接

2.1 管理数据库的sql命令
查看  show  databases;
创建  create  database  库名；
select database();  查询
切换  use  库名；  
删除  drop   database  库名；   
显示当前所在的库      select  database();
2.7 管理表的 sql命令
查看  mysql> show  tables;
创建  mysql> create  table  gamedb.stuinfo(
    -> name  char(10),
    -> addr  char(20)
    -> );
删除     drop  table    库名.表名   ;  
查看表记录  select   *  from   库名.表名   ;  
查看表结构  desc    库名.表名     ;
2.8  管理记录的sql命令
查看   select   *  from   库名.表名   ; 
插入   insert    into   库名.表名  values(字段值列表);
insert into  gamedb.stuinfo values ("tom","beijing");
insert into  gamedb.stuinfo values ("bob","beijing");
修改  update  库名.表名  set   字段名=值 where  条件；
update  gamedb.stuinfo  set  addr="shanghai" where  name="tom";
删除
delete  from   库名.表名;
delete  from  gamedb.stuinfo;
表要建到库里
++++++++++++++++++++++++++++++++
查看表 show  create  table  库名.表明
字符集：建表时指定(更改中文字符)
create  table  学生表(姓名  char(10),年龄  int ) Default  charset=utf8; 
insert into  t1  values(一,19),(二,21);
三、mysql数据类型
数值型：体重，身高，成绩，工资
字符型：姓名，工作单位，通信住址
枚举型：兴趣爱好，性别ssh -X root@192.168.4.51
日期时间型：出生日期，注册时间
3.1  数值类型   
TINYINT     1字节    -128～127          0～255     微小整数
SMALLINT    2字节    -32768～32767     0～65535    小整数
MEDIUMINT   3字节    -2^23～2^23-1      0～2^24-1    中整数
INT         4字节    -2^31～2^31-1      0～2^32-1     大整数
BIGINT      8字节    -2^63～2^63-1      0～2^64-1     极大整数
FLOAT       4字节                                      单精度浮点数
DOUBLE      8字节                                       双精度浮点数
DECIMAL    对DECIMAL（M，D）其中M为有效位数，D为小数位数，M大于D，占用M+2字节
每种类型的存储数据的范围都是固定
整数类型 （只能存储整数）
create  database  studb;
use   studb;
create  table   t1(level  tinyint unsigned);   无负数
create  table   t1(level  tinyint zerofill);   添0代替空格补位
只保存正数，数值超出范围，报错。
insert into  表名  values(数值);
select *  from   表名
浮点类型
create table  表名(pay  float(7,2))；
insert into  表名  values(小数数值);
一共7位，补出2个小数位  整数自动补足两个0
字符类型
char(字符数)255字符
varchar按数据实际大小分配存储空间
大文本类型text/blob:字符数大于65535存储时使用
create table 表名(name   char(5));  //不超过五个
insert into  表名  values("bob"),("ab");  
create table 表名(name   varchar(5));   //宽度为5
insert into  表名  values("bob"),("ab");
当不够指定字符数时在右边用空格补齐
枚举类型
ENUM 从给定值集中选择单个值
SET 从给定值集中选择一个或多个值
create table  表名(name char(15),sex  enum("boy","girl","no"),likes  set("game","film","eat","music"))；
insert into 表名 values("nb","boy","game,film,eat");
日期时间类型
DATETIME  占用8个字节   yyyymmddhhmmss
TIMESTAMP 占用4个字节  20180711093758
DATE      占用4个字节  0000-00-00～9999-12-31
YEAR      占用1个字符  1901～2155 不能写00 只打两位的时候自动补值19/20
TIME      占用3个字符  hh：mm：ss
use  库名
create table  t4(name char(15),barthday date,work date,s_year  year,meeetting datetime);
desc   表名
赋值
insert into t4 values("mingzi",20180202,20181231,1992,19220202000000);
insert into 表名 values("asdr",19920254,20180202,20,19221231);
select  *  from  t4;
datetime 与 timestamp 区别
create  table  表名  (meetting datetime,party timestamp);
insert into  表名  values(201607111102356，20190202111235);
insert into(party)  表名  values(20190202111235);
NULL     20190202111235  
insert into  表名(meetting)  values(201607111102356);
201607111102356    当前时间
时间函数
now()      获取系统当前日期和时间
year()     执行时动态获得系统日期时间 
sleep(N)   休眠N秒
curdate()  获取当前的系统日期
curtime()  获取当前的系统时刻
month()    获取指定时间中的月份
date()     获取指定时间中的日期
time()     获取指定时间中的时刻
insert into  t5  values(20180202020202,curdate());
select  *   from  t5;
insert  into  t5  values(date(now()));
数值类型的宽度是显示宽度，不能限制字段赋值大小 字段值的大小由类型决定
create  table 表名 (id int(4) unsigned zerofill,age int(2) unsigned zerofill);
 insert into t6 values(5,7);
    0005 |   07
insert into t6 values(25,37);
    0025 |   37
约束条件 作用：控制如何给字段赋值
Null         允许为空
NOT  NULL    不允许为空
Key          索引类型
Default      设置默认值，缺省为NULL
create table   表名  (name char(15) not null,age int(2) not null default 19,sex enum("boy","girl")not null default"boy");
insert into 表名(name)  values("bob");
insert into 表名  values("bob",null,null);
create table 表名(name char(15) not null default "",class char(7) default "nsd1804",age tinyint(2) not null default 19,sex enum("boy","girl")not null default "boy");
修改表结构
alter table  库名.表名  执行动作；
添加新字段    Add
alter table  表名  add 字段名  类型(宽度)  约束条件；
可加AFTER  字段名；FIRST  字段名；
alter table  库名.表名  add  email varchar(50) default "student@tedu.cn" first，add qq  char(11) after sex;
删除已有字段   Drop  
alter table   库名.表名   drop    email；
修改已有字段类型  Modify
alter table 表名  modify  字段名   类型(宽度)   约束条件；
修改字段名 Change 
alter table 表名  change  源字段名   新字段名 类型(宽度)   约束条件；
修改表名Rename  
alter table 表名  rename stuinfo；
show tables；
select *  from  stuinfo；
索引介绍：给字段值排序的树形结构，类似与"书的目录"
算法：Btree b+tree hash0
索引优点
通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性
索引缺点
当对表中的数据进行增加删除和修改的时候，索引也要动态的维护，降低了数据的维护速度
Btree : 二叉树算法
用法：查看 desc 表； key-------MUL
         show  index from 表\G；
       创建 create aaa on 表(字段) ；
            create  table  表名（字段列表，index(字段名)，index(字段名)）;
       删除 drop index aaa on 表名；
INDEX    普通索引
经常把查询条件的字段设置为INDEX字段
一个表中可以有很多INDEX字段
字段的值允许有重复，切可以赋NULL值
INDEX字段的KEY标志是MUL
UNIQUE   唯一索引
FULLTEXT 全文索引
PRIMARY  主键
一个表中只能有一个primary key字段
对应的字段不允许有重复，且不允许赋null值
如果有多个字段都作为Primary key，称为复合主键，必须一起创建
主键字段的key标志是pri
通常与auto_increment连用
经常把表中能够唯一标识记录的字段设置为主键字段【记录编号字段】
create table 表(字段  char(9) primary key,字段   char(10));
create  table studb.t23( 字段  char(15),字段 smallint(2),字段  enum("allow","deny"),primary  key(字段,字段));
alter table 表 add perinmary key(字段名)
主键的值不允许有重复的
删除主键   alter table 表 drop primary key；
主键primary  key  通常和auto_increment连用。
create  table   库名。表名(stu_id  int(2)  zerofill    primary   key  auto_increment,name  char(10),age  tinyint(2)  unsigned,sex   enum("boy","girl"));
insert into  studb.t27(name,age,sex)values("bob",19,"girl");
已有表中添加记录编号字段id  并使其字段的值自动增长方式赋值
mysql> alter table dogperson add  id int(2) primary key  auto_increment first;
FOREIGN  外键
让当前表字段的值在另一个表中字段值的范围内选择。
使用外键的条件
表的引擎必须是innodb
字段类型要一致
被参照字段必须要是索引类型的一种(primary key)
基础用法
创建外键 foreign  key 的命令格式：
1：create   table   表（字段名列表字段名列表，foreign  key(字段名)   references  表名（字段名） on  update cascade    on  delete  cascade）engine=innodb;
2：create  table  表名(字段    int(2)  primary key  auto_increment,name   char(15),pay float(7,2))engine=innodb;
on  update cascade    //同步更新
on  delete  cascade   //同步删除
references  表名        //引用另一个表
update  表名 set jfb_id=9 where name="bob";
delete from 表名 where jfb_id=2;
删除外键   
alter  table  表名  drop  foreign key  外键名;
alter  table  表名  drop  foreign key  bjb_ibfk_1;
bjb_ibfk_1   外键名称    show  create table 表名；  查看表结构
在已有表创建  
delete from 表名;
alter  table 表名  add  foreign  key(字段)  references 表名(字段)  on  update cascade  on  delete  cascade;
alter table   表 add primary key(字段);字段值不允许重复和赋null
数据导出导入
数据导入：把系统文件的内容存储到数据库服务器的表里
修改目录及查看修改结果
mkdir  /myload  ；  chown mysql /myload
vim /etc/my.cnf
[mysqld]
secure_file_priv="/myload"
systemctl restart  mysqld
mysql> show variables like "secure_file_priv";
+------------------+----------+
| Variable_name    | Value    |
+------------------+----------+
| secure_file_priv | /myload/ |
+------------------+----------+
mysql>system  cp /etc/passwd    /myload
mysql>create table 库.表(username  char(50),password  char(1),uid  int(2),gid int(2),comment  char(100),homedir char(100),shell  char(50),index(username));
mysql>desc  db3.usertab;
mysql>select   * from  db3.usertab;
导入数据
load  data  infile   "/myload/passwd"   into  table    db3.usertab   fields  terminated by ":"   lines  terminated  by   "\n";
alter  table  db3.usertab  add  id  int(2)  primary key  auto_increment  first;
数据导出：把数据库服务器的表里的记录存储到系统文件里
sql查询命令  into  outfile "/myload/"
select   字段,字段  from  库.表   into  outfile   "/myload/1.txt";
select  字段,字段  from  库.表   into  outfile   "/myload/user3.txt"   fields  terminated  by  "###";
select  *  from  库.表  into  outfile   "/myload/user2.txt";
注意事项
——字段分隔符要与文件内的一致
——指定导入文件的绝对路径
——导入数据的表字段类型要与文件字段匹配
——禁用Selinux保护机制
管理表记录
增加表记录
添加一条记录，给所有字段赋值
insert  into  表名  (字段值列表)  values   (字段值列表) ； 
添加N条记录，给所有字段赋值
insert  into  表名 
添加1条记录，给指定字段赋值
insert into  表名(字段名列表)
添加N条记录，给指定字段赋值
insert into 表名(字段名列表)
——字段值要与字段类型相匹配
——对于字符类型的字段，要用双或单引号括起来
——依次给所有字段赋值，字段名可以省略
——只给一部分字段赋值时，必须明确写出对应的字段名称
查询表记录
select  字段1,....,字段N  from 表名  where  条件表达式;
select  字段1,....,字段N  from 表名
——使用*可匹配所有
——指定表名时，可采用库名.表名 的形式
更新表记录
更新表内的所有记录
UODATE 表名 set 字段1=字段1值，字段2=字段2值，字段N=字段N值；
UPDATE 表名 set 字段1=字段1值，字段2=字段2值，字段N=字段N值 where 条件表达时;
——字段值要与字段类型相匹配
——对于字符类型的字段，要用双或单引号括起来
——若不使用where限定条件,会更新所有记录
——限定条件时,只更新匹配条件的记录
删除表记录
仅删除符合条件的记录
delete  from  表名  where  条件表达式;
删除所有的表记录
delete  from  表名;
匹配条件
where 字段名  符号 数值
基本匹配条件
数值比较
= 等于   >.>= 大于.大于或等于   <.<= 小于.小于或等于  ！= 不等于
字符比较/匹配空/非空
= 相等  ！=不相等  IS NULL 匹配空  IS NOT NULL  非空
逻辑匹配：多个判断条件时使用
OR 逻辑或 AND 逻辑与 ！逻辑非 ()提高优先级
范围内匹配/去重显示
in (值列表)在..里..  not in (值列表)不在..里..   between 数字1 and 数字二 在..之间...
distinct 字段名  去重显示 (只适合查询使用)
高级匹配条件
模糊查询
——where 字段名 like ‘通配符’
—_匹配单个字符，%匹配0～N个字符
select *  from  表名 where name like ‘J%’  or  name like ‘%y’;
正则表达式
正则匹配
字段名  regexp   '正则表达式';
^   $    .    *   [  ]
四则运算(select 和 update 操作是可以做数学计算)
字段类型必须数值类型（整型 或浮点型）
+   -   *     /      %
update  表   set  字段=字段+1   where  id<=10;  
操作查询结果
聚集函数
mysql内置数据统计函数
——avg(字段名)     //统计字段平均值
——sum(字段名)     //统计字段之和
——min(字段名)     //统计字段最小值
——max(字段名)     //统计字段最大值
——count(字段名)   //统计字段值个数
查询结果排序
sql查询  order by 字段名 【asc|desc];
默认是asc   desc是降序
查询结果分组
sql查询  group  by 字段名;
查询结果过滤
sql查询  having  条件表达式；
sql查询  where  条件  having  条件表达式；
sql查询  group  by  字段名  having  条件表达式；
限制查询结果显示行数
sql查询  limit  N  //显示查询结果前N条记录
sql查询  limit  N,M  //显示指定范围内的查询记录
N,M:默认从0开始
sql查询   where 条件查询  limit 3；  //显示查询结果前3条记录
sql查询   where 条件查询  limit 3,3；  //从第4条开始，共显示3条
多表查询
复制表
将源表xxx复制为新表yyy
create table yyy select * from xxx;
将指定的查询结果复制为新表zzz
create  table  zzz  SQL查询语句;
复制源表xxx的结构到新表vvv
create table vvv  select * from xxx where false;
将源表vvv的名称改为www
alter table vvv rename to www;
如果条件不存在,则会快速建表;
多表查询
将2个或2个以上的表按照某个条件连接起来,从中选取需要的数据
当多个表中存在相同意义的字段(字段名可以不同)时,可以通过该字段连接多个表
select 字段 from 表1,表2;
select 字段 from 表1,表2  where 条件;
create table 表名 select name,uid,shell  from 库.表   limit 3;
笛卡尔集
select * from 表1,表2;
select 表1.字段,表2.字段 from  表1,表2;
select 表1.字段,表2.字段1,表2.字段2 from  表1,表2;
select 表1.字段,表2.字段1,表2.字段2 from  表1,表2 where 表1.字段=表2.字段;
where子查询
把内层查询结果作为外层查询的查询条件
select 字段  from  表名  where  条件<(select  字段  from  表名  where 条件);
输出年龄小于平均年龄的学生的名字和年龄
select name,age  from  student where age<(select avg(age) from student);
select 字段  from  库.表  where uid (select 字段  from  库.表);
左连接查询:以左边的表为主，显示结果
select 字段  from 表1 left join 表2 on 条件表达式;
右连接查询：以右边的表为主，显示结果
select 字段  from 表1 right join 表2 on 条件表达式;
mysql管理工具
phpmyadmin
安装httpd php php-mysql
重起服务
systemctl restart httpd
systemctl enable httpd
安装软件phpMyAdmin-2.11.11-all-languages.tar.gz
]#tar -zxf phpMyAdmin-2.11.11-all-languages.tar.gz -C /var/www/html/
]# cd /var/www/html/
]#mv phpMyAdmin-2.11.11-all-languages  phpmyadmin
修改软件的配置文件定义管理的数据库服务器
]#cd  phpmyadmin
]#cp   config.sample.inc.php   config.inc.php
]#vim   config.inc.php
17 $cfg['blowfish_secret'] = 'plj123';
31 $cfg['Servers'][$i]['host'] = 'localhost';
:wq
在客户端访问软件 管理数据库服务器
打开浏览器输入url地址 访问软件
http://192.168.4.50/phpmyadmin
                 用户名   
                 密   码  
mysql存储引擎
什么是存储引擎？ 是Mysql数据库服务自带功能程序。处理表的处理器。
每种存储引擎有不同的功能和数据存储方式。
查看当前的数据库服务，支持的存储引擎？
mysql> show  engines;
修改数据库服务默认使用的存储引擎？
]# systemctl  stop  mysqld
]# vim /etc/my.cnf
[mysqld]
default-storage-engine=myisam
:wq
]# systemctl  start  mysqld
mysql> show  engines;
建表是指定表使用的存储引擎
create table   t2  (id int) engine=存储引擎名；
create table   t2  (id int) engine=memory;
create table   t3  (id int) engine=innodb;
修改表使用的存储引擎
alter  table  表名  engine=存储引擎名；
查看表使用的存储引擎
show  crate  table  表名；
常用存储引擎的特点？（myisam   innodb）
myisam 存储引擎特点？
支持表级锁  （客户端连接数据库服务器后，对表的数据做访问时，若表的存储引擎是myisam的话，会给整张表加锁）
不支持事务和事务回滚
每个表对应3个表文件
表.frm    表结构数据      desc  表
表.MYD  表数据
表.MYI   表的index索引信息   
InnoDB的特点？
支持行级锁（客户端连接数据库服务器后，对表的数据做访问时，若表的存储引擎是innodb的话，会只给表中被访问的行加锁）
支持外键、事务和事务回滚   
锁颗度 （锁表的范围）
行锁
表锁
锁类型：
读锁（共享锁）  当对一张表执行查询(select)操作时 会加读锁
写锁（排他锁或互斥锁） 当对一张表执行写（insert update  delete）操作时 会加写锁
每个表对应2个表文件  
表.frm  表结构数据
表.ibd   表数据和index索引
事务（Transactions）：一次sql操作从建立连接到操作完成断开连接的访问过程给称作事务。
支持事务的可以做事务回滚 ：一次sql操作有任意一步没有执行成功会恢复所有操作。（对innodb存储引擎的表 访问时 必须任意一步操作都成功，才能完成操作。）
innodb存储引擎的表有对应的事务文件记录所有SQL命令
cd /var/lib/mysql/
ibdata1
ib_logfile0
ib_logfile1
事务的特点:  ACID
mysql> set  autocommit=off;
mysql> show  variables  like "autocommit"; 
commit ;  手动提交
rollback;  回滚操作
工作中建表时，如何决定表使用的存储引擎？
执行查询操作多的表适合使用myisam存储引擎，节省系统资源。
              myisam 行锁
select  *  from t1 where id <=10;
select  *  from t1 where id >10;
执行写操作多的表适合使用innodb存储引擎，这样并发访问量大。
            innodb 表锁
update  t1  set  name="bob" where  id=3;
update  t1  set  name="bob" where  id=4;
DBA1_DAY05 数据备份与恢复 (DBA )
1数据备份方式:
物理备份： 备份库和表对应系统文件
50:
cp  -r  /var/lib/mysql     /dbdir.bak
cp  -r  /var/lib/mysql/mysql    /mysqldb.bak
cp  -r  /var/lib/mysql/mysql/db.*   /root/ 
tar  zcvf   /mysql.tar.gz  /var/lib/mysql/*  
scp    -r   /mysqldb.bak   192.168.4.51:/root/
恢复   把备份的文件拷贝会对应的数据库目录，把所有者和组修改为mysql  重启数据库服务器。
51:
systemctl  stop  mysqld
rm  -rf /var/lib/mysql/mysql
cp -r  /root/mysqldb.bak   /var/lib/mysql/mysql
chown  -R  mysql:mysql  /var/lib/mysql/mysql
systemctl  start  mysqld
逻辑备份：  执行备份命令时，根据备份的库表 生产对应的sql命令，把命令保存到指定的文件里。恢复时，执行保存sql命令的备份文件 把数据写回数据库里。
+++++++++++++++++++++++++++++
2数据备份策略
完全备份   备份所有数据（通常包括3类对象： 一张表里的所有数据   一个库的所有表    一台数据库服务器的所有数据）
只备份新产生的数据：
差异备份： 备份自完全备份，后所有新产生的数据
增量备份： 备份上次备份后，所有新产生的数据
完全+差异
完全+增量 *
工作中使用crond服务 执行备份脚本（在备份脚本调用备份命令）做数据备份
00  23   *  *  1      /root/allbak.sh
00  23   *  *  2-7 /root/newbak.sh
++++++++++++++++++++++++++++++
3备份数据和数据恢复：
完全备份：mysqldum 
]# man  mysqldump
]# mysqldump   -uroot   -p123456   库名  > 目录名 /文件名.sql
库名的表示方式：
--all-databases  或  -A   所有库所有表
库名     备份库下的所有表
库名 表名      备份一张的所有记录
-B 库名1  库名2    备份某几个库的所有数据
完全恢复：mysql
]#mysql  -uroot  -p123456    库名  <  目录名 /文件名.sql
mysql>  source   目录名 /文件名.sql
]# mkdir  /bakdir
]# mysqldump -uroot -p123456  -A  > /bakdir/alldb.sql
]# mysqldump -uroot -p123456  db3  > /bakdir/db3.sql
]# mysqldump -uroot -p123456  db3 user > /bakdir/db3-user.sql
]# mysqldump -uroot -p123456  -B db3 db55 > /bakdir/twodb.sql
50：
mysql> drop  table db3.user;
mysql> select  * from db3.user;
]# mysql  -uroot -p123456   db3  <  /bakdir/db3-user.sql
mysql> drop  database  db3;
mysql>  create  database  db3;
]#  mysql  -uroot -p123456   db3  <  /bakdir/db3.sql
db3.user    50
db3-user.sql
mysqldump   备份和恢复会锁表
vim /bakdir/db3-user.sql
lock  tables   user   write
insert  into  
每周一  23点备份数据库服务器上db3库下的所有表到系统的/bakdir目录。
]# vim  /root/alldb3.sh
#!/bin/bash
if [ ! -e  /bakdir ];then
   mkdir   /bakdir
fi       
x=`date  +%F`
mysqldump   -uroot  -p123456  db3   >  /bakdir/db3_${x}.sql  
:wq
]#chmod  +x  /root/alldb3.sh 
]# /root/alldb3.sh 
]# ls  /bakdir
]# crontab  -e
00  23  * *  1    /root/alldb3.sh      &>  /dev/null
:wq
5增量备份与恢复：
1、启用MySQL服务自带的binlog日志 文件
2、安装第3方软件提供的命令innobackupex  ***
binlog日志的使用：
日志介绍：是服务日志文件中的一种（默认没有启用） 记录除查询之外的sql命令.
select     show tables   desc   show  databases  查
insert   update   delete   写
启用日志
[mysqld]
server_id=50
log-bin
binlog-format="mixed"
host50-bin.000001    日志文件   > 500M
host50-bin.index       索引文件
++++++++++++++++++++++
查看日志内容
]# mysqlbinlog    host50-bin.000001 
自定义binlog日志名称及存储目录
mkdir /logdir
chown  mysql  /logdir/
vim /etc/my.cnf
[mysqld]
log-bin=/logdir/db50
:wq
]#  systemctl  restart   mysqld
]# mysqlbinlog   /logdir/db50.000001
日志记录sql命令格式
偏移量    时间点
]# mysqlbinlog 选项  /logdir/db50.000001
--start-position=数字
--stop-position=数字
--start-datetime="yyyy-mm-dd  hh:mm:ss"
--stop-datetime="yyyy-mm-dd  hh:mm:ss"
执行日志文件记录的sql命令恢复数据
]# mysqlbinlog 选项  日志文件名   |  mysql  -uroot -p123456
]#  mysqlbinlog   --start-position=616   --stop-position=794  /logdir/db50.000001  |  mysql  -uroot -p123456
]#  mysqlbinlog   --start-datetime="2018-07-17 14:21:15"   
--stop-datetime="2018-07-17 14:21:18"  /logdir/db50.000001  |  mysql  -uroot -p123456
mysql> show master status; 查看正在使用的日志信息
+++++++++++++++++++++++++++++++
手动生成新的日志文件
]# systemctl  restart mysqld
]# mysql -uroot -p123456  -e "flush logs"
mysql> flush logs;
]# mysqldump  -uroot  -p123456  --flush-logs  db3  >  /bakdir/db3.sql
删除已有的日志文件
mysql>  purge  master  logs  to  "db50.000005";
mysql> reset  master;
]#rm  -rf /logdir/*
++++++++++++++++++++++++++++++++++++
2、安装第3方软件percona提供的命令innobackupex  ***
    yum  -y  install  perl-DBD-mysql   perl-Digest-MD5
    rpm -ivh  libev-4.15-1.el6.rf.x86_64.rpm 
    rpm -ivh percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm 
]#rpm  -ql  percona-xtrabackup-24
    man  xtrabackup
   man  innobackupex
命令格式：innobackupex   <选项>
选项
--user       用户名
--password    密码
--port       端口号
--host       主机名
--databases  数据库名
--no-timestamp   不用日期命名备份文件存储的子目录名
databases="库名" databases=“库1 库2” databases=“库.表”
--redo-only  日志合并
--apply-log  准备还原(回滚日志)
完全备份和恢复
]# innobackupex --user root  --password 123456  --databases="mysql  performance_schema sys gamedb "  /allbak   --no-timestamp
]# ls   /allbak  （备份目录下既有备份的数据又有日志文件）
cat xtrabackup_checkpoints 
完全恢复
--redo-only 日志合并
--apply-log 准备还原 ( 回滚日志 )
--copy-back 恢复数据
--incremental 目录名 增量备份
--incremental--basedir=目录名 增量备份时,指定上一次备份数据存储的目录名
--incremental-dir= 目录名 准备恢复数据时,指定增量备份数据存储的目录名
--export 导出表信息
import 导入表空间
(要求数据库目录必须是空的)
1  、准备恢复数据  （回滚备份目录下日志信息）
]#innobackupex --user root  --password 123456   --databases="mysql  performance_schema sys gamedb "   --apply-log /allbak  
]# systemctl  stop  mysqld
]# rm  -rf  /var/lib/mysql/*
2、把备份目录下数据库拷贝回数据库目录下
]#innobackupex --user root  --password 123456    --databases="mysql  performance_schema sys gamedb " --copy-back /allbak
3、修改数据库目录所有者和组用户为mysql
]# chown  -R  mysql:mysql /var/lib/mysql
启动数据库服务
]# systemctl  start   mysqld
登录查看数据。
]# mysql  -uroot  -p123456
mysql> show databases;
mysql>  select  * from gamedb.a;
+++++++++++++++++++++++++++++++++++
增量备份和恢复
cat xtrabackup_checkpoints
从应用示例
– 必须先有一次完全备份 , 备份到 /allbak
– 第 1 次增量备份到 /new1
– 第 2 次增量备份到 /new2完全备份文件里恢复单表
#innobackupex --user root --password 123456 databases =" 库名列表 " /fullbak --no-timestamp // 完全备份
#innobackupex --user root --password 123456databases =" 库名列表” --incremental /new1   --incremental-basedir="/fullbak" --no-timestamp // 第 1 次增量备份
#innobackupex --user root --password 123456 databases=" 库名列表 " --incremental /new2   --incremental-basedir="/new1" --no-timestamp // 第 2 次增量备份
增量恢复
#rm -rf /var/lib/mysql ; mkdir /var/lib/mysql/
#innobackupex --user root --password 123456 \
--databases =" 库名列表 " --apply-log /fullbak // 恢复完全备份
#innobackupex --user root --password 123456 \
--databases=“ 库名列表” --apply-log --redo-only /fullbak \
--incremental-dir="/new1" // 恢复增量
#innobackupex --user root --password 123456 \
--databases=“ 库名列表 " --apply-log --redo-only /fullbak
--incremental-dir="/new2" // 恢复增量
#innobackupex --user root --password 123456 \
--databases=“ 库名列表 " --copy-back /fullbak // 拷贝文件
#chown -R mysql:mysql /var/lib/mysql/
#systemctl stop mysqld ; systemctl start mysqld
在完全备份文件中恢复单个表
innobackupex --user root --password 123456 --
databases="gamedb" /allbak --no-timestamp
mysql> drop table gamedb.a;
alter table gamedb.a import tablespace; // 导入表空间
innobackupex --user root --password 123456 --databases="gamedb" --apply-log --export /allbak // 导出表信息
 create table gamedb.a(id int); // 创建表
 alter table gamedb.a discard tablespace; // 删除表空间
 system cp /allbak/gamedb/a.{ibd,cfg,exp}  /var/lib/mysql/gamedb  // 拷贝表信息文件
 system chown mysql:mysql /var/lib/mysql/bbsdb/a.*   // 修改所有者


















